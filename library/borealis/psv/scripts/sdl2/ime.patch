diff --git a/src/video/vita/SDL_vitavideo.c b/src/video/vita/SDL_vitavideo.c
index 9e823996e..d5c11e6a1 100644
--- a/src/video/vita/SDL_vitavideo.c
+++ b/src/video/vita/SDL_vitavideo.c
@@ -400,10 +400,10 @@ SDL_bool VITA_HasScreenKeyboardSupport(_THIS)
 #define SCE_IME_LANGUAGE_ENGLISH_US SCE_IME_LANGUAGE_ENGLISH
 #endif
 
-static void utf16_to_utf8(const uint16_t *src, uint8_t *dst)
+static void _utf16_to_utf8(const uint16_t *src, uint8_t *dst, uint32_t max_length)
 {
     int i;
-    for (i = 0; src[i]; i++) {
+    for (i = 0; src[i] != 0 && i < max_length; i++) {
         if (!(src[i] & 0xFF80)) {
             *(dst++) = src[i] & 0xFF;
         } else if (!(src[i] & 0xF800)) {
@@ -425,44 +425,90 @@ static void utf16_to_utf8(const uint16_t *src, uint8_t *dst)
     *dst = '\0';
 }
 
+static void utf8_to_utf16(const uint8_t *src, uint16_t *dst) {
+    int i;
+    for (i = 0; src[i];) {
+        if ((src[i] & 0xE0) == 0xE0) {
+            *(dst++) = ((src[i] & 0x0F) << 12) | ((src[i + 1] & 0x3F) << 6) | (src[i + 2] & 0x3F);
+            i += 3;
+        } else if ((src[i] & 0xC0) == 0xC0) {
+            *(dst++) = ((src[i] & 0x1F) << 6) | (src[i + 1] & 0x3F);
+            i += 2;
+        } else {
+            *(dst++) = src[i];
+            i += 1;
+        }
+    }
+
+    *dst = '\0';
+}
+
 #if defined(SDL_VIDEO_VITA_PVR)
 SceWChar16 libime_out[SCE_IME_MAX_PREEDIT_LENGTH + SCE_IME_MAX_TEXT_LENGTH + 1];
-char libime_initval[8] = { 1 };
+SceWChar16 libime_initval[SCE_IME_MAX_TEXT_LENGTH + 1];
 SceImeCaret caret_rev;
+SceUInt32 caret_index;
+__attribute__((weak)) uint8_t* vita_ime_init_text = NULL;
+__attribute__((weak)) uint32_t vita_ime_max_text = 32;
+__attribute__((weak)) uint32_t vita_ime_type = 0;
 
 void VITA_ImeEventHandler(void *arg, const SceImeEventData *e)
 {
     SDL_VideoData *videodata = (SDL_VideoData *)arg;
-    SDL_Scancode scancode;
     uint8_t utf8_buffer[SCE_IME_MAX_TEXT_LENGTH];
     switch (e->id) {
     case SCE_IME_EVENT_UPDATE_TEXT:
-        if (e->param.text.caretIndex == 0) {
-            SDL_SendKeyboardKeyAutoRelease(SDL_SCANCODE_BACKSPACE);
-            sceImeSetText((SceWChar16 *)libime_initval, 4);
-        } else {
-            scancode = SDL_GetScancodeFromKey(*(SceWChar16 *)&libime_out[1]);
-            if (scancode == SDL_SCANCODE_SPACE) {
-                SDL_SendKeyboardKeyAutoRelease(SDL_SCANCODE_SPACE);
-            } else {
-                utf16_to_utf8((SceWChar16 *)&libime_out[1], utf8_buffer);
-                SDL_SendKeyboardText((const char *)utf8_buffer);
-            }
+        // Prohibit adjusting the caret index during editing.
+        if (e->param.text.caretIndex < e->param.text.preeditIndex + e->param.text.preeditLength) {
             SDL_memset(&caret_rev, 0, sizeof(SceImeCaret));
-            SDL_memset(libime_out, 0, ((SCE_IME_MAX_PREEDIT_LENGTH + SCE_IME_MAX_TEXT_LENGTH + 1) * sizeof(SceWChar16)));
-            caret_rev.index = 1;
+            caret_rev.index = e->param.text.preeditIndex + e->param.text.preeditLength;
             sceImeSetCaret(&caret_rev);
-            sceImeSetText((SceWChar16 *)libime_initval, 4);
+            break;
+        }
+
+        // Update caret index
+        caret_index = e->param.text.caretIndex;
+
+        // Update text
+        if (e->param.text.editLengthChange < 0) {
+            SDL_SendKeyboardKeyAutoRelease(SDL_SCANCODE_DELETE);
+        } else if (e->param.text.editLengthChange > 0) {
+            _utf16_to_utf8(&e->param.text.str[e->param.text.editIndex], utf8_buffer, e->param.text.editLengthChange);
+            SDL_SendKeyboardText((const char *)utf8_buffer);
         }
+
+        // Update preedit text
+        if (e->param.text.preeditLength == 0) {
+            const char empty_char = '\0';
+            SDL_SendEditingText(&empty_char, 0, 0);
+        } else {
+            _utf16_to_utf8(&e->param.text.str[e->param.text.preeditIndex], utf8_buffer, e->param.text.preeditLength);
+            SDL_SendEditingText((const char *)utf8_buffer, 0, SDL_strlen((const char *)utf8_buffer));
+        }
+        break;
+    case SCE_IME_EVENT_UPDATE_CARET:
+        if (e->param.caretIndex < caret_index) {
+            SDL_SendKeyboardKeyAutoRelease(SDL_SCANCODE_LEFT);
+        } else {
+            SDL_SendKeyboardKeyAutoRelease(SDL_SCANCODE_RIGHT);
+        }
+        caret_index = e->param.caretIndex;
         break;
     case SCE_IME_EVENT_PRESS_ENTER:
         SDL_SendKeyboardKeyAutoRelease(SDL_SCANCODE_RETURN);
     case SCE_IME_EVENT_PRESS_CLOSE:
         sceImeClose();
         videodata->ime_active = SDL_FALSE;
+        vita_ime_init_text = NULL;
+        vita_ime_max_text = 32;
+        vita_ime_type = 0;
         break;
     }
 }
+#else
+static void utf16_to_utf8(const uint16_t *src, uint8_t *dst) {
+    return _utf16_to_utf8(src, dst, SCE_IME_MAX_TEXT_LENGTH);
+}
 #endif
 
 void VITA_ShowScreenKeyboard(_THIS, SDL_Window *window)
@@ -478,16 +524,22 @@ void VITA_ShowScreenKeyboard(_THIS, SDL_Window *window)
     sceImeParamInit(&param);
 
     SDL_memset(libime_out, 0, ((SCE_IME_MAX_PREEDIT_LENGTH + SCE_IME_MAX_TEXT_LENGTH + 1) * sizeof(SceWChar16)));
+    caret_index = 0;
+    if (vita_ime_init_text == NULL) {
+        SDL_memset(libime_initval, 0, ((SCE_IME_MAX_TEXT_LENGTH + 1) * sizeof(SceWChar16)));
+    } else {
+        utf8_to_utf16(vita_ime_init_text, libime_initval);
+    }
 
-    param.supportedLanguages = SCE_IME_LANGUAGE_ENGLISH_US;
+    param.supportedLanguages = 0;
     param.languagesForced = SCE_FALSE;
-    param.type = SCE_IME_TYPE_DEFAULT;
-    param.option = SCE_IME_OPTION_NO_ASSISTANCE;
+    param.type = (SceImeType) vita_ime_type;
+    param.option = SCE_IME_OPTION_NO_AUTO_CAPITALIZATION;
     param.inputTextBuffer = libime_out;
-    param.maxTextLength = SCE_IME_MAX_TEXT_LENGTH;
+    param.maxTextLength = vita_ime_max_text;
     param.handler = VITA_ImeEventHandler;
     param.filter = NULL;
-    param.initialText = (SceWChar16 *)libime_initval;
+    param.initialText = libime_initval;
     param.arg = videodata;
     param.work = libime_work;
 
@@ -544,6 +596,13 @@ void VITA_HideScreenKeyboard(_THIS, SDL_Window *window)
     }
 
     videodata->ime_active = SDL_FALSE;
+#else
+    SDL_VideoData *videodata = (SDL_VideoData *)_this->driverdata;
+    videodata->ime_active = SDL_FALSE;
+    sceImeClose();
+    vita_ime_init_text = NULL;
+    vita_ime_max_text = 32;
+    vita_ime_type = 0;
 #endif
 }
 
